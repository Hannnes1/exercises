*** Exercises Week3 ***

Do as many exercises as possible *BUT* you can't spend all your time here.
Labs are mandatory and need time. Decide when to switch to lab2.
Use leftover exercises as recap for the exam.

*** Exercises 1-5 will prepare for Lab 2 ***

A note on debugging arrays in functions
---------------------------------------
To be able to inspect arrays in functions during debug...

1.  Start debugging, enter into function
2.  Assume parameter to functions is arr[] and size is 10.
   - In Debugger window, right click > New Watch
   - Type: (int (*)[10]) arr
   - Enter, enter
3.  Click the triangles before the watch to inspect the elements
4.  To remove watch, right click in window > Remove Watch


Exercises
---------

1.  See ex1sum_to.c. Let users sum 1-n (inclusive). You should use a for-loop. Example output

   Program to sum 1-n    (first run)
   Input n > 1
   Sum 1 to 1 = 1

   Program to sum 1-n    (second run)
   Input n > 6
   Sum 1 to 6 = 21        (1+2+3+4+5+6)


2.  See ex2sum_arr.c. Let user store 5 number in an array, then sum all elements
   in the array. Use for-loops. Example output.

   Program to sum an array of size 5
   Input 0 > 2
   Input 1 > 4
   Input 2 > 5
   Input 3 > 6
   Input 4 > 3
   Array is : [2, 4, 5, 6, 3]
   Sum of elements is: 20


3.  See ex3arr_func.c. Uncomment and implement each method in turn. The final output
   should print true for all except the three last which should output a random reordering
   of the array (permutation).

   NOTE: The shuffle function should use the modern version of the Fisher-Yates
   algorithm to do the reordering
   See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle


4.  See ex4matrix.c. Let the user input a small matrix. Then transpose the matrix (store it).
   Finally print the matrix and the transpose of the matrix.
   See https://en.wikipedia.org/wiki/Transpose. Example

   Program to transpose matrix
   Input a 2 x 2 matrix
   Input 0 0 > 1
   Input 0 1 > 2
   Input 1 0 > 3
   Input 1 1 > 4
   Matrix is
   1 2
   3 4
   Transpose is
   1 3
   2 4


5.  See ex5matrix_func.c. Implement all functions so that all output prints true.

6.  See ex6common.c. Given two equal sized integer arrays with positive elements
   and an integer, n > 0. Find if there is any common sequence of elements of
   length n in the arrays. If a sequence is found, return it (padded with zeros).
   If there are more common sequences, these are ignored. If no sequence found,
   an array with all elements set to 0 is returned. See code for examples.
   This is exercising functional decomposition. Break down method common_seq to
   solve the problem.
